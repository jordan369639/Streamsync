{"version":3,"file":"static/js/576.cf3f9e58.chunk.js","mappings":"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","sources":["trendingmovielists/MovieLists.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport \"./movielist.css\"\r\nimport Axio from \"../Axio\";\r\nimport Request from '../Request';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCirclePlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faXmark } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst MovieLists = ({ title, fetchData ,isTop}) => {\r\n  const [movie, setMovie] = useState([]);\r\n  const [trailerId, setTrailerId] = useState(\"\");\r\n  const clickdiv = useRef();\r\n  useEffect(() => {\r\n    async function fetchdata() {\r\n\r\n      try {\r\n        const request = await Axio.get(fetchData);\r\n\r\n        const result =  request.data.results;\r\n        const top10 = result.slice(0,9);\r\n       if(isTop){\r\n        setMovie(\r\n          top10\r\n        )\r\n       }else{\r\n        setMovie(\r\n          result\r\n        )\r\n       }\r\n       \r\n      }\r\n      catch (err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n    fetchdata();\r\n\r\n  }, [fetchData])\r\n\r\n\r\n\r\n\r\n  const handleTrailer = (movie) => {\r\n\r\n    if (trailerId) {\r\n      setTrailerId(\"\");\r\n    } else {\r\n\r\n      movieTrailer(movie?.title || \"\").then((url) => {\r\n        let trailer = new URLSearchParams(new URL(url).search);\r\n        setTrailerId(trailer.get('v'))\r\n      }).catch((err) => {\r\n        console.log(err)\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n\r\n  const scrollright = (e) => {\r\n    let ref = e.target.parentElement.parentElement;\r\n    ref.scrollLeft += ref.clientWidth;\r\n  };\r\n  \r\n  const scrollLeft = (e) => {\r\n    let ref = e.target.parentElement.parentElement;\r\n    ref.scrollLeft -= ref.clientWidth;\r\n  };\r\n  return (\r\n\r\n    <div className='movieList'>\r\n     \r\n      <h2 className='title' id={title}>{title}</h2>\r\n      <div className=\"rowPoster\">\r\n        <div className=\"rightbtn\">\r\n\r\n      <button className='right' onClick={(e)=> scrollLeft(e)}><FontAwesomeIcon icon={faChevronLeft} /></button>\r\n        </div>\r\n        <div className=\"leftbtn\">\r\n\r\n<button className='left' onClick={(e)=> scrollright(e)}><FontAwesomeIcon icon={faChevronRight} /></button>\r\n</div>\r\n        {\r\n          movie.map((elem, i) => {\r\n            return (\r\n\r\n              <div className=\"moviePosters\" ref={clickdiv} key={elem.title+(i*2) || elem.backdrop_path} id={title}>\r\n                <div className={`img ${isTop && \"imgActive\"}`}>\r\n                <div className={`count ${isTop && \"countActive\"} `}>\r\n                <h2>{i+1}</h2>\r\n               </div>\r\n                  <img src={`https://image.tmdb.org/t/p/original/${elem.poster_path}`} alt=\"\" key={elem.title+i+i || elem.backdrop_path} className={`${isTop} && \"TopImg\"`}/>\r\n                  <div className=\"playBtn\">\r\n                <button onClick={(e) => handleTrailer(elem)}><FontAwesomeIcon icon={faCirclePlay} /></button>\r\n\r\n                  </div>\r\n                  \r\n                </div>\r\n                   \r\n\r\n              </div>\r\n            )\r\n            \r\n          })\r\n          \r\n        }\r\n       \r\n\r\n      </div>\r\n      <div className=\"video \" >\r\n      <button className={`cancelbtn ${trailerId && \"cancelbtnActive\"}`} onClick={()=> setTrailerId(\"\")}><FontAwesomeIcon icon={faXmark} /></button>\r\n        {trailerId && <  YouTube videoId={trailerId} opts={opts} />}\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default MovieLists"],"names":["_ref","title","fetchData","isTop","movie","setMovie","useState","trailerId","setTrailerId","clickdiv","useRef","useEffect","async","result","Axio","get","data","results","top10","slice","err","console","log","fetchdata","_jsxs","className","children","_jsx","id","onClick","e","ref","target","parentElement","scrollLeft","clientWidth","FontAwesomeIcon","icon","faChevronLeft","scrollright","faChevronRight","map","elem","i","concat","src","poster_path","alt","backdrop_path","movieTrailer","then","url","trailer","URLSearchParams","URL","search","catch","handleTrailer","faCirclePlay","faXmark","YouTube","videoId","opts","height","width","playerVars","autoplay"],"sourceRoot":""}